---
title: Getting Started with Fuse Fabric
in_menu: true
sort_info: 10
--- pipeline:jade

.row
  .span4
    :markdown
      # Install
  .span12
    :&markdown
      To install Fuse Fabric 
  
      * [download](../download.html) the Fuse Fabric distro 
      * [checkout](../source.html) and [build](../building.html) the Fabric distro locally and untar the fabric/fuse-fabric tarball
  

.row
  .span4
    :markdown
      # Start Fuse Fabric
  .span12
    :&markdown
      To start Fuse Fabric use the following commands from a shell 

    pre
      | bin/fusefabric           (for Unix systems)
      | bin\fusefabric.bat       (for Windows systems)    
    
    :&markdown
      Fuse Fabric will present itself on the console as shown below
    pre
      | fuse-fabric-1.1$ bin/fusefabric 
      | ______                  ______      _            _       
      | |  ___|                 |  ___|    | |          (_)      
      | | |_  _   _  ___   ___  | |_  __ _ | |__   _ __  _   ___ 
      | |  _|| | | |/ __| / _ \ |  _|/ _` || '_ \ | '__|| | / __|
      | | |  | |_| |\__ \|  __/ | | | (_| || |_) || |   | || (__ 
      | \_|   \__,_||___/ \___| \_|  \__,_||_.__/ |_|   |_| \___|
      |   Fuse Fabric Agent (1.1)
      |   http://fabric.fusesource.org/
      |
      | Hit '<tab>' for a list of available commands
      | and '[cmd] --help' for help on a specific command.
      | Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown this Fuse Fabric Agent.
      |
      | Create a new Fabric via 'fabric:create'
      | or join an existing Fabric via 'fabric:join [someUrls]'
      |
      | FuseFabric:admin@root> 

.row
  .span4
    :markdown
      # Create a Fabric
  .span12
    :&markdown
      Create a new fabric on your machine via the **fabric:create** command.

    pre
      | FuseFabric:admin@root> fabric:create

    :&markdown
      This creates initial Fabric registry (running a local ZooKeeper server) and importing all the default profiles.
      
      The initial profile data all comes from the [fabric/import](https://github.com/fusesource/fuse/tree/master/fabric/fuse-fabric/src/main/resources/distro/fabric/import) directory.

      You can then view the available profiles via **profile-list**

    pre
      | FuseFabric:admin@root> profile-list
      | [id]                           [parents]
      | ode                            servicemix
      | hadoop-namenode                
      | mq                             karaf
      | example-fabric-camel           examples, karaf
      | esb                            mq, nmr, camel
      | hadoop-datanode                
      | hadoop                         
      | example-fabric-mq              examples
      | camel                          karaf
      | default                        
      | nmr                            karaf
      | karaf                          default
      | zk-server-0000-1               zk-server-0000
      | zk-server-0000

    :&markdown
      Or list the available agents via **agent-list**

    pre
      | FuseFabric:admin@root> agent-list
      | [id]                           [alive]    [profiles]                     [provision status]                                                                                  
      | root                           true       default, zk-server-0000-1      success                                                                                             

.row
  .span4
    :markdown
      # Create a Broker process 
  .span12
    :&markdown
      Lets start by creating a message broker using the default **mq** profile as a child agent on the **root** process, and naming the agent **broker1**.
      Child agents are separate JVMs which can be connected to via the shell or JMX and started/stopped independently.

    pre
      | FuseFabric:karaf@root> agent-create-child --profile mq root broker1
      | ...

    :&markdown
      Check that the agent has been created (it can take a few seconds):  

    pre
      | FuseFabric:admin@root> fabric:agent-list
      | [id]                           [alive]    [profiles]                     [provision status]                                                                                  
      | root                           true       default, zk-server-0000-1
      | &nbsp;&nbsp;broker1                      true       mq                             success                                                                                             

    :&markdown
      Check that the agent has been created (it can take a few seconds):  

    pre
      | FuseFabric:admin@test> help activemq:list
      | ...

    :&markdown
      The message broker provides a set of commands (**activemq**) you can use to access details from the broker.
      For example running **activemq:list** will show the broker names running on the agent:

    pre
      | admin@broker1> activemq:list
      | BrokerName = broker1

.row
  .span4
    :markdown
      # Exit an Agent 
  .span12
    :&markdown
      After creating the message broker, we want to disconnect the agent, to return to Fuse Fabric.
      You can do this by pressing `ctrl + d` in the console, or run the **logout** command:

    pre
      | FuseFabric:karaf@root> logout
      | ...
  

.row
  .span4
    :markdown
      # Create a Camel process 
  .span12
    :&markdown
      Now lets create a separate agent running a Camel route using the default **example-fabric-camel** profile as a child agent on the **root** process.

    pre
      | FuseFabric:karaf@root> agent-create-child --profile example-fabric-camel root camel1
      | ...

    :&markdown
      Check that the agent has been created and started (it can take a few seconds). You can run the **agent-list** command repeatably to see the current stats:  

    pre
      | FuseFabric:admin@root> agent-list
      | [id]                           [alive]    [profiles]                     [provision status]                                                                                  
      | root                           true       default, zk-server-0000-1
      | &nbsp;&nbsp;broker1                      true       mq                             success                                                                                             
      | &nbsp;&nbsp;camel1                       true       example-fabric-camel           success                                                                                                    
  
    :&markdown
      Now we should be able to connect to it and list the Camel routes

    pre
      | FuseFabric:admin@root> agent-connect camel1
      | ...
      | admin@camel1> camel:list-routes 
      | [route1              ]
      | [route2              ]

.row
  .span4
    :markdown
      # Running Camel Example 
  .span12
    :&markdown
      The **example-fabric-camel** example which we just installed, will every 5th second send a message to the message broker. And the consume
      the message and print it to the log. This is implemented using the two Camel routes, which you can view in more details using **camel:info-route route1**

    pre
      | admin@camel1> camel:info-route route1
      | ... 

    :&markdown
      Among the details will be statistics for number of messages processed, represented as `Exchanges Total`. We can now logout from the *camel1* agent
      and connect to the message broker:

    pre
      | admin@camel1> logout
      | ...
      | FuseFabric:admin@root> agent-connect broker1
      | ...

    :&markdown
      From the message broker agent, we can view statistics from the message broker, such as the `camel-test` queue which is used by the example.
      The following command shows a number of stats for the given queue.

    pre
      | admin@broker1> activemq:query -QQueue=camel-test
      | ...

    :&markdown
      Congratulations, you are now started with Fuse Fabric, and have successfully managed to install two child agents. Install an example, which
      exchanges messages between the agents using the message broker.


.row
  .span4
    :markdown
      # Install Fuse Fabric in a vanilla container
  .span12
    :&markdown
      Fuse Fabric can be installed in a vanilla container such as Apache Karaf or ServiceMix.
      Run the following in an Apache Karaf (2.2.x) or ServiecMix (4.x) console:  

    pre
      | karaf@root> shell:source mvn:org.fusesource.fabric/fuse-fabric/#{project_version}/karaf/installer

    :&markdown
      The above command will install the necessary features if they are not already present (they come by default in the Fabric distro) and then
      create the initial ZooKeeper server and profiles.

       If you are using a SNAPSHOT version of Fabric, and have not build Fabric locally, then you must add the Maven repositories list,
       the location of where the Fabric SNAPSHOT artifacts is installed.
       In the "etc/org.ops4j.pax.url.mvn.cfg" file add the following entries to the "org.ops4j.pax.url.mvn.repositories" key:

    pre
      | http://repo.fusesource.com/nexus/content/repositories/snapshots@snapshots, \
      | http://repo.fusesource.com/nexus/content/groups/public


