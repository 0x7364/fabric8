<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="amqp.xsl"?>

<!--
  Copyright Notice
  ================
  (c) Copyright Bank of America, N.A., Barclays Bank PLC, Cisco Systems, Credit Suisse, Deutsche
  Boerse Systems, Goldman Sachs, HCL Technologies Ltd, INETCO Systems Limited, Informatica
  Corporation, JPMorgan Chase Bank Inc. N.A, Microsoft Corporation, my-Channels, Novell, Progress
  Software, Red Hat Inc., Software AG, Solace Systems Inc., StormMQ Ltd., Tervela Inc., TWIST
  Process Innovations Ltd, VMware Inc. and WS02 Inc. 2006-2011. All rights reserved.

  License
  =======

  Bank of America, N.A., Barclays Bank PLC, Cisco Systems, Credit Suisse, Deutsche Boerse Systems,
  Goldman Sachs, HCL Technologies Ltd, INETCO Systems Limited, Informatica Corporation, JPMorgan
  Chase Bank Inc. N.A, Microsoft Corporation, my-Channels, Novell, Progress Software, Red Hat Inc.,
  Software AG, Solace Systems Inc., StormMQ Ltd., Tervela Inc., TWIST Process Innovations Ltd,
  VMware Inc. and WS02 Inc. (collectively, the "Authors") each hereby grants to you a worldwide,
  perpetual, royalty-free, nontransferable, nonexclusive license to (i) copy, display, distribute
  and implement the Advanced Message Queuing Protocol ("AMQP") Specification and (ii) the Licensed
  Claims that are held by the Authors, all for the purpose of implementing the Advanced Message
  Queuing Protocol Specification. Your license and any rights under this Agreement will terminate
  immediately without notice from any Author if you bring any claim, suit, demand, or action related
  to the Advanced Message Queuing Protocol Specification against any Author. Upon termination, you
  shall destroy all copies of the Advanced Message Queuing Protocol Specification in your possession
  or control.

  As used hereunder, "Licensed Claims" means those claims of a patent or patent application,
  throughout the world, excluding design patents and design registrations, owned or controlled, or
  that can be sublicensed without fee and in compliance with the requirements of this Agreement, by
  an Author or its affiliates now or at any future time and which would necessarily be infringed by
  implementation of the Advanced Message Queuing Protocol Specification. A claim is necessarily
  infringed hereunder only when it is not possible to avoid infringing it because there is no
  plausible non-infringing alternative for implementing the required portions of the Advanced
  Message Queuing Protocol Specification. Notwithstanding the foregoing, Licensed Claims shall not
  include any claims other than as set forth above even if contained in the same patent as Licensed
  Claims; or that read solely on any implementations of any portion of the Advanced Message Queuing
  Protocol Specification that are not required by the Advanced Message Queuing Protocol
  Specification, or that, if licensed, would require a payment of royalties by the licensor to
  unaffiliated third parties. Moreover, Licensed Claims shall not include (i) any enabling
  technologies that may be necessary to make or use any Licensed Product but are not themselves
  expressly set forth in the Advanced Message Queuing Protocol Specification (e.g., semiconductor
  manufacturing technology, compiler technology, object oriented technology, networking technology,
  operating system technology, and the like); or (ii) the implementation of other published
  standards developed elsewhere and merely referred to in the body of the Advanced Message Queuing
  Protocol Specification, or (iii) any Licensed Product and any combinations thereof the purpose or
  function of which is not required for compliance with the Advanced Message Queuing Protocol
  Specification. For purposes of this definition, the Advanced Message Queuing Protocol
  Specification shall be deemed to include both architectural and interconnection requirements
  essential for interoperability and may also include supporting source code artifacts where such
  architectural, interconnection requirements and source code artifacts are expressly identified as
  being required or documentation to achieve compliance with the Advanced Message Queuing Protocol
  Specification.

  As used hereunder, "Licensed Products" means only those specific portions of products (hardware,
  software or combinations thereof) that implement and are compliant with all relevant portions of
  the Advanced Message Queuing Protocol Specification.

  The following disclaimers, which you hereby also acknowledge as to any use you may make of the
  Advanced Message Queuing Protocol Specification:

  THE ADVANCED MESSAGE QUEUING PROTOCOL SPECIFICATION IS PROVIDED "AS IS," AND THE AUTHORS MAKE NO
  REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS
  OF THE ADVANCED MESSAGE QUEUING PROTOCOL SPECIFICATION ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE
  IMPLEMENTATION OF THE ADVANCED MESSAGE QUEUING PROTOCOL SPECIFICATION WILL NOT INFRINGE ANY THIRD
  PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.

  THE AUTHORS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL
  DAMAGES ARISING OUT OF OR RELATING TO ANY USE, IMPLEMENTATION OR DISTRIBUTION OF THE ADVANCED
  MESSAGE QUEUING PROTOCOL SPECIFICATION.

  The name and trademarks of the Authors may NOT be used in any manner, including advertising or
  publicity pertaining to the Advanced Message Queuing Protocol Specification or its contents
  without specific, written prior permission. Title to copyright in the Advanced Message Queuing
  Protocol Specification will at all times remain with the Authors.

  No other rights are granted by implication, estoppel or otherwise.

  Upon termination of your license or rights under this Agreement, you shall destroy all copies of
  the Advanced Message Queuing Protocol Specification in your possession or control.

  Trademarks
  ==========
  "JPMorgan", "JPMorgan Chase", "Chase", the JPMorgan Chase logo and the Octagon Symbol are
  trademarks of JPMorgan Chase & Co.

  RED HAT is a registered trademarks of Red Hat, Inc. in the US and other countries.

  Java, all Java-based trademarks and OpenOffice.org are trademarks of Sun Microsystems, Inc. in the
  United States, other countries, or both.

  Other company, product, or service names may be trademarks or service marks of others.

  Link to full AMQP specification:
  =================================
  http://www.amqp.org/confluence/display/AMQP/AMQP+Specification
-->

<!DOCTYPE amqp SYSTEM "amqp.dtd">

<amqp xmlns="http://www.amqp.org/schema/amqp.xsd"
      name="messaging" label="working version">

  <section name="introduction" label="introduction to the Messaging layer">
    <doc>
      <p>
        The messaging layer builds on top of the concepts described in books II and III. The
        <xref name="transport"/> layer defines a number of extension points suitable for use in a
        variety of different messaging applications. The messaging layer specifies a standardized
        use of these to provide interoperable messaging capabilities. This standard covers:
      </p>

      <ul>
        <li>
          <p>message format</p>

          <ul>
            <li>
              <p>properties for the bare message</p>
            </li>

            <li>
              <p>formats for structured and unstructured sections in the bare message</p>
            </li>

            <li>
              <p>headers and footers for the annotated message</p>
            </li>
          </ul>
        </li>

        <li>
          <p>delivery states for messages traveling between nodes</p>
        </li>

        <li>
          <p>distribution nodes</p>
          <ul>
            <li><p>states for messages stored at a distribution node</p></li>
          </ul>
        </li>

        <li>
          <p>sources and targets</p>

          <ul>
            <li>
              <p>default disposition of transfers</p>
            </li>

            <li>
              <p>supported outcomes</p>
            </li>

            <li>
              <p>filtering of messages from a node</p>
            </li>

            <li>
              <p>distribution-mode for access to messages stored at a distribution node</p>
            </li>

            <li>
              <p>on-demand node creation</p>
            </li>
          </ul>
        </li>
      </ul>
    </doc>
  </section>

  <section name="message-format" title="Message Format" label="Message format definitions">

    <doc>
      <p>
        The term message is used with various connotations in the messaging world. The sender may
        like to think of the message as an immutable payload handed off to the messaging
        infrastructure for delivery. The receiver often thinks of the message as not only that
        immutable payload from the sender, but also various annotations supplied by the messaging
        infrastructure along the way. To avoid confusion we formally define the term <i>bare
        message</i> to mean the message as supplied by the sender and the term <i>annotated
        message</i> to mean the message as seen at the receiver.
      </p>

      <p>
        An <i>annotated message</i> consists of the bare message plus areas for annotation at the
        head and foot of the bare message. There are two classes of annotations: annotations that
        travel with the message indefinitely, and annotations that are consumed by the next node.
      </p>

      <p>
        The <i>bare message</i> is divided between standard properties and application data. The
        standard properties have a defined format and semantics and are visible to the messaging
        infrastructure. Application data may be AMQP formatted, opaque binary, or a combination of
        both. AMQP formatted application data is visible to the messaging infrastructure for
        additional services such as querying by filters.
      </p>

      <picture><![CDATA[
                 Bare Message
                      |
           .----------+----------.
           |                     |
 +--------+ +------------+------+ +--------+
 | header | | properties | body | | footer |
 +--------+ +------------+------+ +--------+
|                                           |
'---------------------+---------------------'
                      |
              Annotated Message
]]>
      </picture>

      <p>
        The bare message is immutable within the AMQP network. That is neither the opaque body, nor
        the properties can be changed by any node acting as an AMQP intermediary.
      </p>

      <p>
        Information which may be modified by the network, or information which is directed at the
        infrastructure and does not form part of the bare message, is placed in a <i>header</i> and
        <i>footer</i>. The <i>header</i> and <i>footer</i> are transferred with the message but may
        be updated en-route from its origin to its destination.
      </p>

      <p>
        Altogether the message consists of the following sections:
      </p>

      <ol>
        <li>
          <p>
            Zero or one <xref name="header"/> sections for annotations at the head of the message.
          </p>
        </li>
        <li>
          <p>
            Zero or one <xref name="properties"/> sections for standard properties in the bare
            message.
          </p>
        </li>
        <li>
          <p>
            Zero or one application data sections of type amqp-map.  Where the first section of the
            application data is an amqp-map the section is taken to contain "application properties"
            which may be used for purposes such as routing and filtering.
          </p>
        </li>
        <li>
          <p>Zero or more application data sections (of any valid section type).</p>
        </li>
        <li>
          <p>
            Zero or one <xref name="footer"/> sections for annotations at the tail of the message.
          </p>
        </li>
      </ol>

      <picture><![CDATA[
  Section 0   Section 1    Section 2         Section n-2   Section n-1
+-----------+------------+-----------+-----+-------------+-------------+
|  header   | properties | app-data  | ... |  app-data   |   footer    |
+-----------+------------+-----------+-----+-------------+-------------+
]]>
      </picture>

      <p>
        Each message section MUST be distinguished and identified with a section-code as per the
        Message Fragmentation definition in the <xref name="links"/> section of Book III. The
        section codes are assigned according to <xref name="section-codes"/>.
      </p>
    </doc>

    <type class="restricted" name="section-codes" source="uint">
      <choice name="header" value="0">
        <doc>
          <p>
            Section-code indicating a header section (one of which MUST form the first section of a
            Message).  Sections of this type MUST be of zero length or consist of a single encoded
            instance of the <xref name="header"/> type.
          </p>
        </doc>
      </choice>
      <choice name="properties" value="1">
        <doc>
          <p>
            Section-code indicating a properties section (one of which MUST form the second section
            of a Message).  Sections of this type MUST be of zero length or consist of a single
            encoded instance of the <xref name="properties"/> type.
          </p>
        </doc>
      </choice>
      <choice name="footer" value="2">
        <doc>
          <p>
            Section-code indicating a footer section (one of which MUST form the last section of a
            Message).  Sections of this type MUST be of zero length or consist of a single encoded
            instance of the <xref name="footer"/> type.
          </p>
        </doc>
      </choice>
      <choice name="data" value="3">
        <doc>
          <p>
            Section-code indicating a application data section. Sections of this type consist of
            opaque binary data (note, in particular, that the section is <b>not</b> an instance of
            the AMQP <xref type="type" name="binary"/> type).
          </p>
        </doc>
      </choice>
      <choice name="amqp-data" value="4">
        <doc>
          <p>
            Section-code indicating an application data section. Sections of this type MUST consist
            of zero or more encoded AMQP values.
          </p>
        </doc>
      </choice>
      <choice name="amqp-map" value="5">
        <doc>
          <p>
            Section-code indicating an application data section. Sections of this type MUST be of
            zero length or consist of a single encoded instance of an AMQP <xref type="type"
            name="map"/>.
          </p>
        </doc>
      </choice>
      <choice name="amqp-list" value="6">
        <doc>
          <p>
            Section-code indicating an application data section. Sections of this type MUST be of
            zero length or consist of a single encoded instance of an AMQP <xref type="type"
            name="list"/>.
          </p>
        </doc>
      </choice>
    </type>

    <type class="composite" name="header" source="list" provides="section"
          label="transport headers for a Message">
      <doc>
        <p>
          The header struct carries information about the transfer of a Message over a specific
          Link.
        </p>
      </doc>

      <descriptor name="amqp:header:list" code="0x00000000:0x00000020"/>

      <field name="durable" type="boolean" label="specify durability requirements">
        <doc>
          <p>
            Durable Messages MUST NOT be lost even if an intermediary is unexpectedly terminated and
            restarted.
          </p>
        </doc>
      </field>

      <field name="priority" type="ubyte" label="relative Message priority">
        <doc>
          <p>
            This field contains the relative Message priority. Higher numbers indicate higher
            priority Messages. Messages with higher priorities MAY be delivered before those with
            lower priorities.
          </p>

          <p>
            An AMQP intermediary implementing distinct priority levels MUST do so in the following
            manner:
          </p>

          <ul>
            <li>
              <p>
                If n distinct priorities are implemented and n is less than 10 -- priorities 0 to
                (5 - ceiling(n/2)) MUST be treated equivalently and MUST be the lowest effective
                priority.  The priorities (4 + floor(n/2)) and above MUST be treated equivalently
                and MUST be the highest effective priority. The priorities (5 - ceiling(n/2)) to (4
                + floor(n/2)) inclusive MUST be treated as distinct priorities.
              </p>
            </li>

            <li>
              <p>
                If n distinct priorities are implemented and n is 10 or greater -- priorities 0 to
                (n - 1) MUST be distinct, and priorities n and above MUST be equivalent to priority
                (n - 1).
              </p>
            </li>
          </ul>

          <p>
            Thus, for example, if 2 distinct priorities are implemented, then levels 0 to 4 are
            equivalent, and levels 5 to 9 are equivalent and levels 4 and 5 are distinct. If 3
            distinct priorities are implements the 0 to 3 are equivalent, 5 to 9 are equivalent and
            3, 4 and 5 are distinct.
          </p>

          <p>
            This scheme ensures that if two priorities are distinct for a server which implements m
            separate priority levels they are also distinct for a server which implements n
            different priority levels where n &gt; m.
          </p>
        </doc>
      </field>

      <field name="transmit-time" type="timestamp" label="the time of Message transmit">
        <doc>
          <p>
            The point in time at which the sender considers the Message to be transmitted. The ttl
            field, if set by the sender, is relative to this point in time.
          </p>
        </doc>
      </field>

      <field name="ttl" type="ulong" label="time to live in ms">
        <doc>
          <p>
            Duration in milliseconds for which the Message should be considered "live". If this is
            set then a Message expiration time will be computed based on the transmit-time plus this
            value. Messages that live longer than their expiration time will be discarded (or dead
            lettered). If the transmit-time is not set, then the expiration is computed relative to
            the Message arrival time.
          </p>
        </doc>
      </field>

      <field name="former-acquirers" type="uint" label="">
        <doc>
          <p>
            The number of other Links that have acquired but failed to process the Message as
            indicated by the rejected or modified outcome (see the delivery-failed flag). This does
            not include the current Link even if delivery to the current Link has been previously
            attempted.
          </p>
        </doc>
      </field>

      <field name="delivery-failures" type="uint"
             label="the number of prior unsuccessful delivery attempts">
        <doc>
          <p>
            The number of unsuccessful previous attempts to deliver this message. If this value is
            non-zero it may be taken as an indication that the Message may be a duplicate. The
            delivery-failures value is initially set to the same value as the Message has when it
            arrived at the source. It is incremented upon an outcome being settled at the sender,
            according to rules defined for each outcome.
          </p>
        </doc>
      </field>

      <field name="message-attrs" type="message-attributes" label="message attributes">
        <doc>
          <p>
            The message-attrs map provides an extension point where domain or vendor specific
            end-to-end attributes can be added to the Message header. As the Message (and therefore
            the header) passes through a node, the values in the message-attrs map MUST be retained,
            unless augmented or updated at the node. Further the message-attrs value can be
            augmented or updated at each node either through node configuration, or when indicated
            by the <xref name="modified"/> outcome of a message transfer.
          </p>
        </doc>
      </field>

      <field name="delivery-attrs" type="message-attributes" label="delivery attributes">
        <doc>
          <p>
            The delivery-attrs map provides an extension point where domain or vendor specific
            attributes related only to the current state of the Message at the source, or relating
            to the current transfer to the target can be added to the Message header. The
            delivery-attrs value can be augmented or updated at the node either through node
            configuration, or when indicated by the <xref name="modified"/> outcome of a message
            transfer.
          </p>
        </doc>
      </field>

    </type>

    <type class="composite" name="properties" source="list" provides="section"
          label="immutable properties of the Message">
      <doc>
        <p>Message properties carry information about the Message.</p>
      </doc>

      <descriptor name="amqp:properties:list" code="0x00000000:0x00000021"/>

      <field name="message-id" type="binary" label="application Message identifier">
        <doc>
          <p>
            Message-id is an optional property which uniquely identifies a Message within the
            Message system. The Message producer is usually responsible for setting the message-id
            in such a way that it is assured to be globally unique. The server MAY discard a Message
            as a duplicate if the value of the message-id matches that of a previously received
            Message sent to the same Node.
          </p>
        </doc>
      </field>

      <field name="user-id" type="binary" label="creating user id">
        <doc>
          <p>
            The identity of the user responsible for producing the Message. The client sets this
            value, and it MAY be authenticated by intermediaries.
          </p>
        </doc>
      </field>

      <field name="to" type="*" requires="address"
             label="the address of the Node the Message is destined for">
        <doc>
          <p>
            The to field identifies the Node that is the intended destination of the Message. On any
            given transfer this may not be the Node at the receiving end of the Link.
          </p>
        </doc>
      </field>

      <field name="subject" type="string" label="the subject of the message">
        <doc>
          <p>
            A common field for summary information about the Message content and purpose.
          </p>
        </doc>
      </field>

      <field name="reply-to" type="*" requires="address" label="the Node to send replies to">
        <doc>
          <p>The address of the Node to send replies to.</p>
        </doc>
      </field>

      <field name="correlation-id" type="binary" label="application correlation identifier">
        <doc>
          <p>
            This is a client-specific id that may be used to mark or identify Messages between
            clients. The server ignores this field.
          </p>
        </doc>
      </field>

      <field name="content-length" type="ulong" label="length of the combined payload in bytes">
        <doc>
          <p>
            The total size in octets of the combined payload of all
            <xref name="fragment">fragments</xref> that together make the Message.
          </p>
        </doc>
      </field>

      <field name="content-type" type="symbol" label="MIME content type">
        <doc>
          <p>
            The RFC-2046 MIME type for the Message content (such as "text/plain"). This is set by
            the originating client. As per RFC-2046 this may contain a charset parameter defining
            the character encoding used: e.g. 'text/plain; charset="utf-8"'.
          </p>
        </doc>
      </field>

    </type>

    <type class="composite" name="footer" source="list" provides="section"
          label="transport footers for a Message">

      <descriptor name="amqp:footer:list" code="0x00000000:0x00000022"/>

      <field name="message-attrs" type="message-attributes" label="message attributes">
        <doc>
          <p>
            The message-attrs map provides an extension point where domain or vendor specific
            end-to-end attributes can be added to the Message footer. As the Message (and therefore
            the header) passes through a node, the values in the message-attrs map MUST be retained,
            unless augmented or updated at the node. Further the message-attrs value can be
            augmented or updated at each node either through node configuration, or when indicated
            with the <xref name="modified"/> outcome of a message transfer.
          </p>
        </doc>
      </field>

      <field name="delivery-attrs" type="message-attributes" label="delivery attributes">
        <doc>
          <p>
            The delivery-attrs map provides an extension point where domain or vendor specific
            attributes related only to the current state of the Message at the source, or relating
            to the current transfer to the target can be added to the Message footer. The
            delivery-attrs value can be augmented or updated at the node either through node
            configuration, or when indicated with the <xref name="modified"/> outcome of a message
            transfer.
          </p>
        </doc>
      </field>
    </type>

    <type class="restricted" name="message-attributes" source="map" label="message annotations">
      <doc>
        <p>
          A map providing an extension point for annotations on message deliveries. All values used
          as keys in the map MUST be of type symbol. Further if a key begins with the string
          "x-req-" then the target MUST reject the message unless it understands how to process the
          supplied key/value.
        </p>
      </doc>
    </type>

    <definition name="MESSAGE-FORMAT" value="0"
                label="the format + revision for the messages defined by this document">
      <doc>
        <p>
          This value goes into the message-format field of the transfer frame when transferring
          messages of the format defined herein.
        </p>
      </doc>
    </definition>
  </section>

  <section name="delivery-state" title="Delivery State"
           label="the delivery states defined for messaging">
    <doc>
      <p>
        The Messaging layer defines a concrete set of delivery states which can be used (via the
        <xref type="type" name="disposition"/> frame) to indicate the state of the message at the
        receiver. The delivery state includes the number of <i>bytes-transferred</i>,
        the <i>outcome</i> of processing at the receiver, and a <i>txn-id</i>.
      </p>

      <p>
        When the outcome is set, this indicates that the state at the receiver is either globally
        terminal (if no transaction is specified) or provisionally terminal within the specified
        transaction.
      </p>

      <p>
        When no outcome is set, a delivery-state is considered non-terminal. In this case the
        bytes-transferred field may be used to indicate partial progress. Use of this field during
        link recovery allows the sender to resume the transfer of a large message without
        retransmitting all the message data.
      </p>

      <p>
        The following outcomes are formally defined by the messaging layer to indicate the result of
        processing at the receiver:
      </p>

      <ul>
        <li>
          <p><xref name="accepted"/>: indicates successful processing at the receiver</p>
        </li>
        <li>
          <p><xref name="rejected"/>: indicates an invalid and unprocessable message</p>
        </li>
        <li>
          <p><xref name="released"/>: indicates that the message was not (and will not be)
            processed</p>
        </li>
        <li>
          <p><xref name="modified"/>: indicates that the message was modified, but not processed</p>
        </li>
      </ul>
    </doc>

    <type class="composite" name="delivery-state" provides="delivery-state" source="list"
          label="the state of a message transfer">
      <descriptor name="amqp:delivery-state:list" code="0x00000000:0x00000023"/>
      <field name="options" type="options" label="options map"/>
      <field name="bytes-transferred" type="ulong"/>
      <field name="outcome" type="*" requires="outcome"/>
      <field name="txn-id" type="*" requires="txn-id"/>
    </type>

    <type class="composite" name="accepted" source="list" provides="outcome"
          label="the accepted outcome">
      <doc>
        <p>
          The accepted outcome is used to indicate that an incoming Message has been successfully
          processed. The accepted outcome does not increment the <i>delivery-failures</i> count in
          the header of the accepted Message.
        </p>
      </doc>

      <descriptor name="amqp:accepted:list" code="0x00000000:0x00000024"/>
      <field name="options" type="options" label="options map"/>
    </type>

    <type class="composite" name="rejected" source="list" provides="outcome"
          label="the rejected outcome">
      <doc>
        <p>
          The rejected outcome is used to indicate that an incoming Message is invalid and therefore
          unprocessable. The rejected outcome when applied to a Message will cause the
          <i>delivery-failures</i> count to be incremented in the header of the rejected Message.
        </p>
      </doc>

      <descriptor name="amqp:rejected:list" code="0x00000000:0x00000025"/>

      <field name="options" type="options" label="options map"/>
      <field name="error" type="error" label="error that caused the message to be rejected">
        <doc>
          <p>
            The value supplied in this field will be placed in the header of the rejected Message in
            the message-attrs map under the key "rejected".
          </p>
        </doc>
      </field>
    </type>

    <type class="composite" name="released" source="list" provides="outcome"
          label="the released outcome">
      <doc>
        <p>
          The released outcome is used to indicate that a given transfer was not and will not be
          acted upon.  An outcome of released MUST NOT cause the <i>delivery-failures</i> count of
          the header of the released Message to be incremented.
        </p>
      </doc>

      <descriptor name="amqp:released:list" code="0x00000000:0x00000026"/>
      <field name="options" type="options" label="options map"/>
    </type>

    <type class="composite" name="modified" source="list" provides="outcome"
          label="the modified outcome">
      <descriptor name="amqp:modified:list" code="0x00000000:0x00000027"/>

      <field name="options" type="options" label="options map"/>
      <field name="delivery-failed" type="boolean"
             label="count the transfer as an unsuccessful delivery attempt">
        <doc>
          <p>
            If the delivery-failed flag is set, any Messages modified MUST have their
            delivery-failures count incremented.
          </p>
        </doc>
      </field>

      <field name="deliver-elsewhere" type="boolean" label="prevent redelivery">
        <doc>
          <p>
            If the deliver-elsewhere is set, then any Messages released MUST NOT be redelivered to
            the releasing Link Endpoint.
          </p>
        </doc>
      </field>

      <field name="message-attrs" type="message-attributes" label="message attributes">
        <doc>
          <p>
            Map containing attributes to combine with the existing <i>message-attrs</i> held in the
            Message's header section.  Where the existing message-attrs of the Message contain an
            entry with the same key as an entry in this field, the value in this field associated
            with that key replaces the one in the existing headers; where the existing message-attrs
            has no such value, the value in this map is added.
          </p>
        </doc>
      </field>

      <field name="delivery-attrs" type="message-attributes" label="delivery attributes">
        <doc>
          <p>
            Map containing attributes to combine with the existing <i>delivery-attrs</i> held in the
            Message's header section.  Where the existing delivery-attrs of the Message contain an
            entry with the same key as an entry in this field, the value in this field associated
            with that key replaces the one in the existing headers; where the existing
            delivery-attrs has no such value, the value in this map is added.
          </p>
        </doc>
      </field>
    </type>
  </section>

  <section name="message-state" title="Distribution Nodes"
           label="common interface for nodes that store and distribute messages">

    <doc title="Message States">
      <p>
        The Messaging layer defines a set of states for Messages stored at a <i>distribution
        node</i>. Not all Nodes store Messages for distribution, however these definitions permit
        some standardized interaction with those nodes that do. The transitions between these states
        are controlled by the transfer of Messages to/from a distribution node and the resulting
        terminal delivery state. Note that the state of a Message at one distribution node does not
        affect the state of the same Message at a separate node.
      </p>

      <p>
        By default a Message will begin in the AVAILABLE state. Prior to initiating an
        <i>acquiring</i> transfer, the Message will transition to the ACQUIRED state. Once in the
        ACQUIRED state, a Messages is ineligible for <i>acquiring</i> transfers to any other Links.
      </p>

      <p>
        A Message will remain ACQUIRED at the distribution node until the transfer is settled. The
        delivery state at the receiver determines how the message transitions when the transfer is
        settled. If the delivery state at the receiver is not yet known, (e.g. the link endpoint is
        destroyed before recovery occurs) the <i>default-outcome</i> of the source is used.
      </p>

      <p>
        State transitions may also occur spontaneously at the distribution node. For example if a
        Message with a ttl expires, the effect of expiry may be (depending on specific type and
        configuration of the distribution node) to move spontaneously from the AVAILABLE state into
        the ARCHIVED state. In this case any transfers of the message are settled by the
        distribution node regardless of receiver state.
      </p>

      <picture title="Message State Transitions"><![CDATA[
                         +------------+
                      +->| AVAILABLE  |
                      |  +------------+
                      |        |
                      |        |
settled with outcome: |        |
  RELEASED/MODIFIED   |        | TRANSFER (acquiring)
                      |        |
                      |        |
                      |       \|/
                      |  +------------+
                      +--|  ACQUIRED  |
                         +------------+
                               |
                               |
                               | settled with outcome:
                               |   ACCEPTED/REJECTED
                               |
                               |
                              \|/
                         +------------+
                         |  ARCHIVED  |
                         +------------+
]]>
      </picture>
    </doc>
  </section>

  <section name="addressing" title="Sources and Targets"
           label="concrete sources and targets defined for messaging">
    <doc>
      <p>
        The messaging layer defines two concrete types (<xref type="type" name="source"/> and
        <xref type="type" name="target"/>) to be used as the <i>source</i> and <i>target</i> of a
        link. These types are supplied in the <i>source</i> and <i>target</i> fields of the
        <xref type="type" name="attach"/> frame when establishing or resuming link. The
        <xref type="type" name="source"/> is comprised of an address (which the container of the
        outgoing Link Endpoint will resolve to a Node within that container) coupled with properties
        which determine:
      </p>

      <ul>
        <li>
          <p>
            which messages from the sending Node will be sent on the Link,
          </p>
        </li>

        <li>
          <p>
            how sending the message affects the state of that message at the sending Node,
          </p>
        </li>

        <li>
          <p>
            the behaviour of Messages which have been transferred on the Link, but have not yet
            reached a terminal state at the receiver, when the source is destroyed.
          </p>
        </li>
      </ul>
    </doc>

    <doc title="Filtering Messages">
      <p>
        A source can restrict the messages transferred from a source by specifying a <i>filter</i>.
        Filters can be thought of as functions which take the message as input and return a boolean
        value: true if the message will be accepted by the source, false otherwise. A <i>filter</i>
        MUST NOT change its return value for a Message unless the state or annotations on the
        Message at the Node change (e.g. through an updated delivery state).
      </p>
    </doc>

    <doc title="Distribution Modes">
      <p>
        The Source defines an optional distribution-mode that informs and/or indicates how
        distribution nodes are to behave with respect to the Link. The distribution-mode of a Source
        determines how Messages from a distribution node are distributed among its associated Links.
        There are two defined distribution-modes: <i>move</i> and <i>copy</i>. When specified, the
        distribution-mode has two related effects on the behaviour of a distribution node with
        respect to the Link associated with the Source.
      </p>

      <p>
        The <i>move</i> distribution-mode causes messages transferred from the distribution node to
        transition to the ACQUIRED state prior to transfer over the link, and subsequently to the
        ARCHIVED state when the transfer is settled with a successful outcome. The <i>copy</i>
        distribution-mode leaves the state of the Message unchanged at the distribution node.
      </p>

      <p>
        A Source MUST NOT resend a Message which has previously been successfully transferred from
        the Source, i.e. reached an ACCEPTED delivery state at the receiver. For a
        <i>move</i> link with a default configuration this is trivially achieved as such an end
        result will lead to the Message in the ARCHIVED state on the Node, and thus anyway
        ineligible for transfer. For a <i>copy</i> link, state must be retained at the source to
        ensure compliance. In practice, for nodes which maintain a strict order on Messages at the
        node, the state may simply be a record of the most recent Message transferred.
      </p>
    </doc>

    <type class="composite" name="source" provides="source" source="list">
      <descriptor name="amqp:source:list" code="0x00000000:0x00000028"/>

      <field name="options" type="options" label="options map"/>
      <field name="address" type="*" requires="address" label="the address of the source">
        <doc>
          <p>
            The address is resolved to a Node in the Container of the sending Link Endpoint.
          </p>
          <p>
            The address of the source MUST be set when sent on a <xref type="type" name="attach"/>
            frame sent by the sending Link Endpoint. When sent by the receiving Link Endpoint the
            address MUST be set unless the create flag is set, in which case the address MUST NOT be
            set.
          </p>
        </doc>
      </field>

      <field name="durable" type="boolean"
             label="indicates that the Source will be durably retained">
      </field>

      <field name="expiry-policy" type="terminus-expiry-policy" default="session"
             label="the expiry policy of the Source"/>

      <field name="timeout" type="seconds" default="0"
             label="duration that an expiring Source will be retained">
        <doc>
          <p>
            The Source starts expiring as indicated by the expiry-policy.
          </p>
        </doc>
      </field>

      <field name="dynamic" type="*" requires="lifetime-policy"
             label="request dynamic creation of a remote Node">
        <doc>
          <p>
            When set by the receiving Link endpoint, this field constitutes a request for the
            sending peer to dynamically create a Node at the source. In this case the address field
            MUST NOT be set.
          </p>
          <p>
            When set by the sending Link Endpoint this field indicates the lifetime policy in use
            for the Node which has been dynamically created at the time of the attach. In this case
            the address field will contain the address of the created Node. The generated address
            SHOULD include the Link name and Session-name or client-id in some recognizable form for
            ease of traceability.
          </p>
          <p>
            The lifetime of the generated node is controlled by the policy specified in the dynamic
            field in the Source of the sending Link Endpoint. Definitionally, the lifetime will
            never be less than the lifetime of the link which caused its creation.
           </p>
        </doc>
      </field>

      <field name="distribution-mode" type="symbol" requires="distribution-mode"
             label="the distribution mode of the Link">
        <doc>
          <p>
            This field MUST be set by the sending end of the Link. This field MAY be set by the
            receiving end of the Link to indicate a preference when a Node supports multiple
            distribution modes.
          </p>
        </doc>
      </field>

      <field name="filter" type="filter-set"
             label="a set of predicates to filter the Messages admitted onto the Link" />

      <field name="default-outcome" type="*" requires="outcome"
             label="default outcome for unsettled transfers">
        <doc>
          <p>
            Indicates the outcome to be used for transfers that have not reached a terminal state at
            the receiver when the transfer is settled, including when the Link Endpoint is
            destroyed. The value MUST be a valid outcome (e.g. <xref name="released"/>, or
            <xref name="rejected"/>).
          </p>
        </doc>
      </field>

      <field name="outcomes" type="symbol" multiple="true"
             label="descriptors for the outcomes that can be chosen on this link">
        <doc>
          <p>
            The values in this field are the symbolic descriptors of the outcomes that can be chosen
            on this link. This field MAY be empty, indicating that the <i>default-outcome</i> will
            be assumed for all message transfers. When present, the values MUST be a symbolic
            descriptor of a valid outcome, e.g. "amqp:accepted:list".
          </p>
        </doc>
      </field>

      <field name="capabilities" type="symbol" multiple="true"
                   label="the extension capabilities the sender supports/desires"/>
    </type>

    <type class="composite" name="target" provides="target" source="list">

      <descriptor name="amqp:target:list" code="0x00000000:0x00000029"/>

      <field name="options" type="options" label="options map"/>
      <field name="address" type="*" requires="address" label="The address of the target.">
        <doc>
          <p>
            The address is resolved to a Node by the Container of the receiving Link Endpoint.
          </p>

          <p>
            The address of the target MUST be set when sent on a <xref type="type" name="attach"/>
            frame sent by the receiving Link Endpoint. When sent by the sending Link Endpoint the
            address MUST be set unless the create flag is set, in which case the address MUST NOT be
            set.
          </p>
        </doc>
      </field>

      <field name="durable" type="boolean"
             label="indicates that the Target will be durably retained">
      </field>

      <field name="expiry-policy" type="terminus-expiry-policy" default="session"
             label="the expiry policy of the Target"/>

      <field name="timeout" type="seconds" default="0"
             label="duration that an expiring Target will be retained">
        <doc>
          <p>
            The Target starts expiring as indicated by the expiry-policy.
          </p>
        </doc>
      </field>

      <field name="dynamic" type="*" requires="lifetime-policy"
             label="request dynamic creation of a remote Node">
        <doc>
          <p>
            When set by the sending Link endpoint, this field constitutes a request for the
            receiving peer to dynamically create a Node at the target. In this case the address
            field MUST NOT be set.
          </p>
          <p>
            When set by the receiving Link Endpoint this field indicates the lifetime policy in use
            for the Node which has been dynamically created at the time of the attach. In this case
            the address field will contain the address of the created Node. The generated address
            SHOULD include the Link name and Session-name or client-id in some recognizable form for
            ease of traceability.
          </p>
          <p>
            The lifetime of the generated node is controlled by the policy specified in the dynamic
            field in the Target of the receiving Link Endpoint. Definitionally, the lifetime will
            never be less than the lifetime of the link which caused its creation.
           </p>
        </doc>
      </field>

      <field name="capabilities" type="symbol" multiple="true"
                   label="the extension capabilities the sender supports/desires"/>
    </type>

    <type class="restricted" name="terminus-expiry-policy" source="symbol"
          label="expiry policy for a Terminus">
      <doc>
        <p>
          Determines when the expiry timer of a Terminus starts counting down from the timeout
          value.
        </p>
      </doc>
      <choice name="session" value="session">
        <doc>
          <p>
            The expiry timer starts when the last associated session is ended.
          </p>
        </doc>
      </choice>
      <choice name="connection" value="connection">
        <doc>
          <p>
            The expiry timer starts when last associated connection is closed.
          </p>
        </doc>
      </choice>
      <choice name="never" value="never">
        <doc>
          <p>
            The Terminus never expires.
          </p>
        </doc>
      </choice>
    </type>

    <type class="restricted" name="std-dist-mode" source="symbol" provides="distribution-mode"
          label="Link distribution policy">
      <doc>
        <p>
          Policies for distributing Messages when multiple Links are connected to the same Node.
        </p>
      </doc>

      <choice name="move" value="move">
        <doc>
          <p>
            once successfully transferred over the Link, the Message will no longer be available to
            other Links from the same Node
          </p>
        </doc>
      </choice>

      <choice name="copy" value="copy">
        <doc>
          <p>
            once successfully transferred over the Link, the Message is still available for other
            Links from the same Node
          </p>
        </doc>
      </choice>
    </type>

    <type class="composite" name="filter" source="list"
          label="the predicate to filter the Messages admitted onto the Link">

      <descriptor name="amqp:filter:list" code="0x00000000:0x0000002a"/>

      <field name="type" type="symbol" mandatory="true" label="the type of the filter" />
      <field name="predicate" type="*" requires="predicate" label="the filter predicate" />

    </type>

    <type class="restricted" name="filter-set" source="map">
      <doc>
        <p>
          A set of named filters.  Every key in the map must be of type
          <xref type="type" name="symbol"/>, every value must be of type
          <xref type="type" name="filter"/>.  A message will pass through a filter-set if and only
          if it passes through each of the named filters
        </p>
      </doc>
    </type>

    <type class="composite" name="delete-on-close" source="list" provides="lifetime-policy"
          label="lifetime of dynamic Node scoped to lifetime of link which caused creation">
      <doc>
        <p>
          A Node dynamically created with this lifetime policy will be deleted at the point that
          the Link which caused its creation ceases to exist.
        </p>
      </doc>

      <descriptor name="amqp:delete-on-close:list" code="0x00000000:0x0000002b"/>

      <field name="options" type="options" label="options map"/>
    </type>

    <type class="composite" name="delete-on-no-links" source="list" provides="lifetime-policy"
          label="lifetime of dynamic Node scoped to existence of links to the Node">
      <doc>
        <p>
          A Node dynamically created with this lifetime policy will be deleted at the point that
          there remain no Links for which the node is either the source or target.
        </p>
      </doc>

      <descriptor name="amqp:delete-on-no-links:list" code="0x00000000:0x0000002c"/>

      <field name="options" type="options" label="options map"/>
    </type>

    <type class="composite" name="delete-on-no-messages" source="list" provides="lifetime-policy"
          label="lifetime of dynamic Node scoped to existence of messages on the Node">
      <doc>
        <p>
          A Node dynamically created with this lifetime policy will be deleted at the point that
          the Link which caused its creation no longer exists and there remain no Messages at the
          Node.
        </p>
      </doc>

      <descriptor name="amqp:delete-on-no-messages:list" code="0x00000000:0x0000002d"/>

      <field name="options" type="options" label="options map"/>
    </type>

    <type class="composite" name="delete-on-no-links-or-messages" source="list"
          provides="lifetime-policy"
          label="lifetime of Node scoped to existence of messages on or links to the Node">
      <doc>
        <p>
          A Node dynamically created with this lifetime policy will be deleted at the point that
          the there are no Links which have this Node as their source or target, and there remain
          no Messages at the Node.
        </p>
      </doc>

      <descriptor name="amqp:delete-on-no-links-or-messages:list" code="0x00000000:0x0000002e"/>

      <field name="options" type="options" label="options map"/>
    </type>

  </section>

</amqp>
